# =============================================================================
# Distributed Job Processor Configuration
# =============================================================================
# Copy this file to .env and modify the values as needed for your environment
# All settings have sensible defaults, but you may want to customize them

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Basic server settings for the HTTP API and worker processes

# Port for the HTTP API server (default: 8080)
SERVER_PORT=8080

# Host address to bind the server to (default: 0.0.0.0 for all interfaces)
SERVER_HOST=0.0.0.0

# Number of worker threads per node (default: 10)
# Increase for CPU-intensive jobs, decrease for memory-constrained environments
WORKER_COUNT=10

# Unique identifier for this node in the cluster (default: node-1)
# MUST be unique across all nodes in the cluster
NODE_ID=node-1

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# MongoDB and Redis connection settings

# MongoDB connection string (default: mongodb://localhost:27017)
# Use MongoDB Atlas for production: mongodb+srv://user:pass@cluster.mongodb.net
MONGODB_URI=mongodb://localhost:27017

# MongoDB database name (default: jobprocessor)
MONGODB_DATABASE=jobprocessor

# MongoDB connection timeout (default: 30s)
MONGODB_TIMEOUT=30s

# Redis server address (default: localhost:6379)
# Use Redis Cluster for production: redis-cluster:6379
REDIS_ADDR=localhost:6379

# Redis password (leave empty if no password required)
REDIS_PASSWORD=

# Redis database number (default: 0)
# Use different numbers for different environments (0=prod, 1=staging, 2=test)
REDIS_DB=0

# =============================================================================
# ELECTION ALGORITHM CONFIGURATION
# =============================================================================
# Leader election and consensus algorithm settings

# Election algorithm to use: bully, raft, or gossip (default: bully)
# - bully: Simple, fast, good for small stable clusters (2-10 nodes)
# - raft: Strong consistency, good for medium clusters (3-7 nodes)
# - gossip: Scalable, good for large dynamic clusters (10+ nodes)
ELECTION_ALGORITHM=bully

# Election timeout duration (default: 10s)
# Time to wait before declaring a leader election failed
# Raft: 5s, Bully: 10s, Gossip: 15s (recommended)
ELECTION_TIMEOUT=10s

# Election interval duration (default: 30s)
# Frequency of heartbeats and election checks
# Raft: 2s, Bully: 30s, Gossip: 1s (recommended)
ELECTION_INTERVAL=30s

# =============================================================================
# LOAD BALANCING CONFIGURATION
# =============================================================================
# Strategy for distributing jobs across workers

# Load balancing strategy (default: round_robin)
# - round_robin: Fair distribution, good for uniform job types
# - least_loaded: Route to least busy workers, good for varying job sizes
# - random: Random distribution, good for maximum throughput
# - priority: Match job priority to worker availability
LOAD_BALANCER_STRATEGY=round_robin

# =============================================================================
# RETRY POLICY CONFIGURATION
# =============================================================================
# Settings for job retry behavior when jobs fail

# Retry policy type (default: exponential)
# - fixed: Same delay between retries
# - exponential: Increasing delay between retries (recommended)
RETRY_POLICY=exponential

# Maximum number of retry attempts (default: 3)
MAX_RETRIES=3

# Base delay for first retry attempt (default: 1s)
RETRY_BASE_DELAY=1s

# Maximum delay between retries (default: 60s)
RETRY_MAX_DELAY=60s

# Multiplier for exponential backoff (default: 2.0)
# Each retry delay = previous_delay * multiplier
RETRY_MULTIPLIER=2.0

# Jitter factor to prevent thundering herd (default: 0.1)
# Adds randomness to retry delays: 0.0 = no jitter, 1.0 = 100% jitter
RETRY_JITTER_FACTOR=0.1

# =============================================================================
# MONITORING AND METRICS
# =============================================================================
# Prometheus metrics and monitoring configuration

# Enable Prometheus metrics collection (default: true)
METRICS_ENABLED=true

# Port for Prometheus metrics endpoint (default: 9090)
METRICS_PORT=9090

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Authentication and encryption settings

# Enable JWT-based authentication (default: false)
# Set to true for production environments
AUTH_ENABLED=false

# Secret key for JWT token signing (change in production!)
# Generate with: openssl rand -hex 32
JWT_SECRET=your-secret-key-change-this-in-production

# Enable TLS encryption (default: false)
# Set to true for production environments
TLS_ENABLED=false

# Path to TLS certificate file (required if TLS_ENABLED=true)
TLS_CERT_FILE=

# Path to TLS private key file (required if TLS_ENABLED=true)
TLS_KEY_FILE=

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================
# Uncomment and modify these for different environments

# DEVELOPMENT ENVIRONMENT
# AUTH_ENABLED=false
# TLS_ENABLED=false
# METRICS_ENABLED=true
# WORKER_COUNT=5
# ELECTION_TIMEOUT=5s

# STAGING ENVIRONMENT
# AUTH_ENABLED=true
# TLS_ENABLED=false
# METRICS_ENABLED=true
# WORKER_COUNT=8
# MONGODB_DATABASE=jobprocessor_staging
# REDIS_DB=1

# PRODUCTION ENVIRONMENT
# AUTH_ENABLED=true
# TLS_ENABLED=true
# METRICS_ENABLED=true
# WORKER_COUNT=20
# MONGODB_URI=mongodb+srv://user:pass@prod-cluster.mongodb.net
# REDIS_ADDR=redis-cluster:6379
# JWT_SECRET=your-secure-production-secret
# TLS_CERT_FILE=/etc/ssl/certs/app.crt
# TLS_KEY_FILE=/etc/ssl/private/app.key

# =============================================================================
# CLUSTER-SPECIFIC CONFIGURATIONS
# =============================================================================
# Example configurations for different cluster setups

# SMALL CLUSTER (2-5 nodes) - Bully Algorithm
# ELECTION_ALGORITHM=bully
# ELECTION_TIMEOUT=10s
# ELECTION_INTERVAL=30s
# WORKER_COUNT=10

# MEDIUM CLUSTER (3-7 nodes) - Raft Consensus
# ELECTION_ALGORITHM=raft
# ELECTION_TIMEOUT=5s
# ELECTION_INTERVAL=2s
# WORKER_COUNT=15

# LARGE CLUSTER (10+ nodes) - Gossip Protocol
# ELECTION_ALGORITHM=gossip
# ELECTION_TIMEOUT=15s
# ELECTION_INTERVAL=1s
# WORKER_COUNT=25

# =============================================================================
# DOCKER COMPOSE OVERRIDES
# =============================================================================
# These are typically set in docker-compose.yml, but can be overridden here

# Docker-specific MongoDB URI (when using docker-compose)
# MONGODB_URI=mongodb://mongo:27017

# Docker-specific Redis address (when using docker-compose)
# REDIS_ADDR=redis:6379